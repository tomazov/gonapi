package queries

import (
	"fmt"
	"log"

	"napi/app/models"
	"napi/internal/cache"
)

// –û—Ç—Ä–∏–º–∞—Ç–∏ workProgress –¥–ª—è –≤—Å—å–æ–≥–æ –ø–æ—à—É–∫—É
func GetWorkProgress(searchID string) (models.WorkProgress, bool) {
	var progress models.WorkProgress
	err := cache.GetJSON(fmt.Sprintf("search:%s:workProgress", searchID), &progress)
	if err != nil {
		log.Printf("üßä no workProgress found: %v", err)
		return nil, false
	}
	return progress, true
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¢–û
func GetTOData(searchID string, recID int) (interface{}, error) {
	var offers interface{}
	err := cache.GetJSON(fmt.Sprintf("search:%s:%d:data", searchID, recID), &offers)
	if err != nil {
		return nil, err
	}
	return offers, nil
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –¢–û
func GetTOStatus(searchID string, recID int) (string, error) {
	return cache.GetString(fmt.Sprintf("search:%s:%d:status", searchID, recID))
}

// –ó—ñ–±—Ä–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
func GetFinalResults(searchID string, progress models.WorkProgress) map[string]interface{} {
	results := make(map[string]interface{})

	for recIDStr := range progress {
		var offers interface{}
		recID := recIDStr

		// –∫–æ–∂–µ–Ω rec_id ‚Äî string, –∞–ª–µ –≤ –∫–ª—é—á—ñ —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–π
		err := cache.GetJSON(fmt.Sprintf("search:%s:%s:data", searchID, recID), &offers)
		if err == nil {
			results[recID] = offers
		}
	}

	return results
}
